package com.talenton.lsg.server;

import android.content.Context;
import android.support.annotation.NonNull;
import android.text.TextUtils;

import com.talenton.lsg.base.dao.HttpCacheDao;
import com.talenton.lsg.base.dao.SearchCacheDao;
import com.talenton.lsg.base.dao.model.HttpCacheBean;
import com.talenton.lsg.base.dao.model.SearchCacheBean;
import com.talenton.lsg.base.okhttp.OkHttpClientManager;
import com.talenton.lsg.base.server.DBHelper;
import com.talenton.lsg.base.server.XLTResponseListener;
import com.talenton.lsg.base.util.AppLogger;
import com.talenton.lsg.base.util.NetWorkUtils;
import com.talenton.lsg.server.bean.school.ClassData;
import com.talenton.lsg.server.bean.school.ClassFilterAge;
import com.talenton.lsg.server.bean.school.ReqAgeList;
import com.talenton.lsg.server.bean.school.ReqClassList;
import com.talenton.lsg.server.bean.school.RspFilterAgeList;
import com.talenton.lsg.server.bean.school.RspListClass;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.query.QueryBuilder;

/**
 * @author zjh
 * @date 2016/5/9
 */
public class SchoolCacheServer {
    private SchoolCacheServer(){}
    private static SchoolCacheServer schoolCacheServer;

    public static SchoolCacheServer getInstance(){
        if (schoolCacheServer == null){
            schoolCacheServer = new SchoolCacheServer();
        }
        return schoolCacheServer;
    }

    /**
     * 获取数据库年龄段
     * @return
     */
    public List<ClassFilterAge> getCacheAgeList(){
        RspFilterAgeList rspFilterAgeList = getRspCacheData(ReqAgeList.URL_AGE_LIST, null, RspFilterAgeList.class);
        if (rspFilterAgeList != null){
            return rspFilterAgeList.getList();
        }
        return null;
    }

    /**
     * 数据库是否有响应数据
     * @param context
     * @param url
     * @param param
     * @param clazz
     * @param listener
     * @param <T>
     * @return
     */
    public <T> boolean hasRspCacheData(Context context,String url,String param,Class<? extends T> clazz, XLTResponseListener<T> listener){
        if (!NetWorkUtils.isNetworkAvailable(context)){
            T t = getRspCacheData(url, param, clazz);
            if (t != null){
                if (listener != null){
                    listener.onResponse(t,null);
                }
                return true;
            }
        }
        return false;
    }

    public <T> T getRspCacheData(String url,String param,Class<? extends T> clazz){
        HttpCacheBean httpCacheBean = getCacheData(url,param);
        if (httpCacheBean != null){
            String rspData = httpCacheBean.getData();
            return OkHttpClientManager.getInstance().getmGson().fromJson(rspData,clazz);
        }
        return null;
    }

    /**
     * 获取数据库缓存数据
     * @param url
     * @param param
     * @return
     */
    public HttpCacheBean getCacheData(String url,String param){
        String key = getCacheKey(url, param);
        HttpCacheBean  httpCacheBean = (HttpCacheBean) load(key);
        return httpCacheBean;
    }

    public Object load(String key){
        Object o = null;
        try {
            QueryBuilder queryBuilder = DBHelper.getInstance().getQueryBuilder(DBHelper.DAO_HTTP_CACHE);
            queryBuilder.where(HttpCacheDao.Properties.Key.eq(key));
            o = queryBuilder.build().unique();
        }catch (Exception e){
            e.printStackTrace();
        }
        return o;
    }

    /**
     * 缓存网络请求数据
     * @param url
     * @param param
     * @param data
     */
    public void saveOrReplaceHttpCacheData(String url, String param, String data){
        String key = getCacheKey(url, param);
        long currentMillis = System.currentTimeMillis();
        HttpCacheBean  httpCacheBean = getCacheData(url, param);
        if (httpCacheBean == null){
            //insert
            httpCacheBean = new HttpCacheBean(null,url,param,key,currentMillis,currentMillis,data);
        }else {
            //replace
            httpCacheBean.setUpdateTime(currentMillis);
            httpCacheBean.setData(data);
        }
        DBHelper.getInstance().insertOrReplace(DBHelper.DAO_HTTP_CACHE,httpCacheBean,false);
    }

    @NonNull
    private String getCacheKey(String url, String param) {
        if (param == null){
            param = "";
        }
        return url + "&" + param;
    }

    public List<SearchCacheBean> getSearchCache(int searchType){
        QueryBuilder queryBuilder = DBHelper.getInstance().getQueryBuilder(DBHelper.DAO_SEARCH_CACHE);
        return queryBuilder.where(SearchCacheDao.Properties.Type.eq(searchType)).orderDesc(SearchCacheDao.Properties.CreateTime).build().list();
    }

    /**
     * 缓存历史搜索
     * @param searchCacheBean
     */
    public void saveOrReplaceSearchCacheData(SearchCacheBean searchCacheBean){
        DBHelper.getInstance().insertOrReplace(DBHelper.DAO_SEARCH_CACHE,searchCacheBean,false);
    }

    public void deleteSearchCacheData(String searchText){
        String sql = "DELETE FROM %s WHERE %s = '%s'";
        String tableName = DBHelper.getInstance().getTableName(DBHelper.DAO_SEARCH_CACHE);
        String excSql =  String.format(sql, tableName, SearchCacheDao.Properties.SearchText.columnName, searchText);
        AppLogger.d("excSql ==> " + excSql);
        DBHelper.getInstance().execSql(DBHelper.DAO_SEARCH_CACHE, excSql);
    }

    public void clearnSearchCacheData(){
        DBHelper.getInstance().deleteAll(DBHelper.DAO_SEARCH_CACHE);
    }

    /**
     * 获取课程列表缓存数据
     * @param reqClassList
     * @return
     */
    public List<ClassData> getClassListCacheData(ReqClassList reqClassList){
        ArrayList<ClassData> classDatas = null;
        HttpCacheBean httpCacheBean = getCacheData(reqClassList.getReqUrl(),reqClassList.getReqParams());
        if (httpCacheBean != null && httpCacheBean.getData() != null && !TextUtils.isEmpty(httpCacheBean.getData())){
            RspListClass rspListClass = OkHttpClientManager.getInstance().getmGson().fromJson(httpCacheBean.getData(),RspListClass.class);
            classDatas = (ArrayList<ClassData>) rspListClass.getList();
        }
        return classDatas;
    }

    /**
     * 获取我参加的课程列表缓存数据
     * @return
     */
    public List<ClassData> getMyClassListCacheData(){
        ReqClassList reqClassList = new ReqClassList(ReqClassList.ClassListType.MY_COURSE);
        return getClassListCacheData(reqClassList);
    }

}
