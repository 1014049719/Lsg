package com.talenton.lsg.ui.feed;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.talenton.lsg.BaseCompatActivity;
import com.talenton.lsg.R;
import com.talenton.lsg.base.server.UserServer;
import com.talenton.lsg.base.server.XLTError;
import com.talenton.lsg.base.server.XLTResponseCallback;
import com.talenton.lsg.base.server.bean.BabyData;
import com.talenton.lsg.base.server.bean.ObjectCode;
import com.talenton.lsg.base.util.XLTToast;
import com.talenton.lsg.base.widget.CommonAlertDialog;
import com.talenton.lsg.base.widget.LoadingViewHolder;
import com.talenton.lsg.event.AttentionAgeEvent;
import com.talenton.lsg.server.FeedServer;
import com.talenton.lsg.server.MineServer;
import com.talenton.lsg.server.bean.feed.AttentionRecordData;
import com.talenton.lsg.server.bean.user.RspSchoolBaby;
import com.talenton.lsg.server.bean.user.SchoolBabyData;

import org.greenrobot.eventbus.EventBus;

import java.util.LinkedList;

public class AttentionSchoolBabyActivity extends BaseCompatActivity implements View.OnClickListener{

    public static final int  TYPE_SCHOOL = 1;
    public static final int  TYPE_PHONE = 2;

    BabyData mBabyData;
    private PullToRefreshListView mPullRefreshListView;
    private ListView mListView;
    private LoadingViewHolder mLoading;
    private PagerAdapter mAdapter;
    private LinkedList<SchoolBabyData> mDatas = new LinkedList<SchoolBabyData>();
    private boolean mIsAttention = false;
    int type;
    String mValue;
    LinearLayout mSearchView;
    EditText mInput;

    public static void startAttentionSchoolBabyActivity(Context context, int type){
        Intent intent = new Intent(context, AttentionSchoolBabyActivity.class);
        intent.putExtra("type",type);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_attention_school_baby);

        type = getIntent().getIntExtra("type", TYPE_SCHOOL);

        mBabyData = UserServer.getCurrentUser().getBaobaodata().get(0);
        mSearchView = (LinearLayout)findViewById(R.id.search_view);
        mInput = (EditText)findViewById(R.id.et_input);
        findViewById(R.id.tv_verify).setOnClickListener(this);

        mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);
        mPullRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
        mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {

            @Override
            public void onPullDownToRefresh(PullToRefreshBase refreshView) {
                RefreshData();
            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase refreshView) {
            }

        });
        mListView = mPullRefreshListView.getRefreshableView();

        mAdapter = new PagerAdapter(this, this);
        mListView.setAdapter(mAdapter);

        View loading = findViewById(R.id.loading_container);
        mLoading = new LoadingViewHolder(mPullRefreshListView, loading, this, this);

        if(type == TYPE_SCHOOL) {
            mSearchView.setVisibility(View.GONE);
            if(mActionBarTitle != null && !TextUtils.isEmpty(mBabyData.schooldata.name))
                mActionBarTitle.setText(mBabyData.schooldata.name);
        }else if(type == TYPE_PHONE){
            if (mActionBarTitle != null){
                mActionBarTitle.setText("输入家长手机号关注");
            }
            mSearchView.setVisibility(View.VISIBLE);
            loading.setVisibility(View.GONE);
        }

    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        // Trigger the initial hide() shortly after the activity has been
        // created, to briefly hint to the user that UI controls
        // are available.
        if(type == TYPE_SCHOOL)
            loadData();
    }

    private void loadData(){
        mValue = type == TYPE_SCHOOL ? String.valueOf(mBabyData.schooldata.schoolid)  : mValue;
        mLoading.showView(LoadingViewHolder.VIEW_TYPE_LOADING);
        MineServer.getSchoolBaby(mValue, type, new XLTResponseCallback<RspSchoolBaby>() {
            @Override
            public void onResponse(RspSchoolBaby data, XLTError error) {
                if (error == null && data != null && data.list != null && data.list.size() > 0) {
                    initData(data);
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_DATA);
                } else if (error != null) {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_NOTWORK);
                } else {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_DATA);
                }
            }
        });
    }

    private void RefreshData(){
        mValue = type == TYPE_SCHOOL ? String.valueOf(mBabyData.schooldata.schoolid)  : mValue;
        MineServer.getSchoolBaby(mValue, type, new XLTResponseCallback<RspSchoolBaby>() {
            @Override
            public void onResponse(RspSchoolBaby data, XLTError error) {
                mPullRefreshListView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullRefreshListView.onRefreshComplete();
                    }
                }, 1000);
                if (error == null && data != null && data.list != null && data.list.size() > 0) {
                    initData(data);
                }
            }
        });
    }

    private void initData(RspSchoolBaby data){
        if(data.list.size() == 0){
            return;
        }

        mDatas.clear();
        mDatas.addAll(data.list);
        mAdapter.notifyDataSetChanged();
    }

    @Override
    public void onBackPressed(){
        super.onBackPressed();
        if (mIsAttention)
            EventBus.getDefault().post(new AttentionAgeEvent(mIsAttention));
    }
    @Override
    public void finish() {
        if (mIsAttention)
            EventBus.getDefault().post(new AttentionAgeEvent(mIsAttention));
        super.finish();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.tv_attention_2:
                attentionCircle((int)v.getTag());
                break;
            case R.id.tv_verify:
                mValue = mInput.getText().toString().trim();
                if (!TextUtils.isEmpty(mValue)){
                    loadData();
                }
                break;
            case R.id.btn_reload:
            case R.id.empty_action:
                loadData();
                break;
        }
    }

    private void attentionCircle(final int pos){
        if (pos > mDatas.size()) return;
        SchoolBabyData d = mDatas.get(pos);
        final long babyId = d.baobaouid;
        final long circleId = d.getCircledata().circle_id;
        final boolean isAttention = d.getCircledata().ext_is_attented;
        if(d.getCircledata().circle_id == 0){
            XLTToast.makeText(this, "该宝宝没有创建圈子，不能关注或取消").show();
            return;
        }
        if(isAttention){
            final CommonAlertDialog mAlertDlg = new CommonAlertDialog(this);
            mAlertDlg.setTitle(R.string.main_prompt);
            mAlertDlg.setCancelable(false);
            mAlertDlg.setNegativeButton(getString(R.string.main_cancel), new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    mAlertDlg.dismiss();
                }
            });

            mAlertDlg.setPositiveButton(getString(R.string.main_confirm), new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    mAlertDlg.dismiss();
                    handleAttentionCirlce(babyId, circleId, !isAttention);
                }
            });
            mAlertDlg.setMessage(R.string.circle_prompt_attention);
            mAlertDlg.show();
        }else {
            if(d.getCircledata().ext_attent_status == AttentionRecordData.ATTENTION_STATUS_APPLY){
                XLTToast.makeText(this, "该宝宝圈已经关注过，正在等待家长审核").show();
                return;
            }
            handleAttentionCirlce(babyId, circleId, !isAttention);
        }
    }

    private void handleAttentionCirlce(final long babyId, final long circleId, final boolean isAttention){
        showProgress(R.string.main_processing, true);
        mIsAttention = true;
        FeedServer.attentionOrCancelCircle(circleId, type, isAttention, new XLTResponseCallback<ObjectCode>() {
            @Override
            public void onResponse(ObjectCode data, XLTError error) {
                hideProgress();
                if (error == null) {
                    if (mDatas != null && !isAttention) {
                        for (SchoolBabyData c : mDatas) {
                            if (c.baobaouid == babyId) {
                                c.isattention = isAttention ? 1 : 0;
                                mAdapter.notifyDataSetChanged();
                                break;
                            }
                        }
                    }
                    int resId = isAttention ? R.string.circle_prompt_attention_success_wait : R.string.circle_prompt_cancel_attention;
                    XLTToast.makeText(AttentionSchoolBabyActivity.this, resId).show();
                } else {
                    if (TextUtils.isEmpty(data.msg)) {
                        XLTToast.makeText(AttentionSchoolBabyActivity.this, R.string.main_request_fail).show();
                    } else {
                        XLTToast.makeText(AttentionSchoolBabyActivity.this, data.msg).show();
                    }
                }
            }
        });
    }

    private class PagerAdapter extends BaseAdapter {

        LayoutInflater mInflater;
        View.OnClickListener mListener;

        public PagerAdapter(Context context, View.OnClickListener listener){
            mInflater = LayoutInflater.from(context);
            mListener = listener;
        }

        @Override
        public int getCount() {
            return mDatas.size();
        }

        @Override
        public SchoolBabyData getItem(int position) {
            return mDatas.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            HolderView holder;
            if (convertView == null){
                convertView = mInflater.inflate(R.layout.item_feed_attention_age, parent, false);
                holder = new HolderView();
                holder.mCirclePhoto = (ImageView)convertView.findViewById(R.id.circle_photo);
                holder.mCircleName = (TextView)convertView.findViewById(R.id.tv_circle_name);
                holder.mCircleDescription = (TextView)convertView.findViewById(R.id.tv_circle_description);
                holder.mAttention = (TextView)convertView.findViewById(R.id.tv_attention);
                holder.mAttention2 = (TextView)convertView.findViewById(R.id.tv_attention_2);
                holder.mAttention.setVisibility(View.GONE);
                holder.mAttention2.setVisibility(View.VISIBLE);
                convertView.setTag(holder);
            }else {
                holder = (HolderView)convertView.getTag();
            }
            SchoolBabyData data = getItem(position);
            //ImageLoader.getInstance().displayImage(data.circle_photo, holder.mCirclePhoto, ImageLoaderManager.DEFAULT_IMAGE_DISPLAYER3);
            holder.mCircleName.setText(data.name);
            if(type == TYPE_SCHOOL){
                holder.mCircleDescription.setText(String.format("家长 %s", data.realname));
            }else{
                holder.mCircleDescription.setText(data.getSchooldata().name);
            }
            if (data.isattention == 1){
                holder.mAttention2.setBackgroundResource(R.drawable.btn_main_bg_selector);
                holder.mAttention2.setTextColor(Color.parseColor("#FFFFFF"));
            }else {
                holder.mAttention2.setBackgroundResource(R.drawable.btn_blue_conner_stroke_selector);
                holder.mAttention2.setTextColor(Color.parseColor("#0082C8"));
            }
            holder.mAttention2.setTag(position);
            holder.mAttention2.setOnClickListener(mListener);
            return convertView;
        }
    }

    private class HolderView{
        public ImageView mCirclePhoto;
        public TextView mCircleName, mCircleDescription, mAttention, mAttention2;
    }
}

