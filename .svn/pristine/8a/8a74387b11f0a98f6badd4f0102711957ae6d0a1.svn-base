package com.talenton.lsg.ui.school;

import android.app.Activity;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;

import com.talenton.lsg.BaseCompatFragment;
import com.talenton.lsg.R;
import com.talenton.lsg.base.okhttp.OkHttpClientManager;
import com.talenton.lsg.base.util.FileUtil;
import com.talenton.lsg.base.util.Preference;
import com.talenton.lsg.server.bean.school.CatalogData;
import com.talenton.lsg.server.bean.school.event.FavoriteEvent;
import com.talenton.lsg.server.bean.school.event.OpenFileEvent;
import com.talenton.lsg.ui.school.adapter.CatalogAdapter;
import com.talenton.lsg.widget.PinnedSectionListView;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.List;

/**
 * @author zjh
 * @date 2016/4/8
 */
public class CatalogFragment extends BaseCompatFragment implements AdapterView.OnItemClickListener {
    private CatalogAdapter catalogAdapter;
    private ArrayList<CatalogData> catalogDatas;
    private PinnedSectionListView pinnedSectionListView;
    private static String DATA = "DATA";
    private OpenFileCallback openFileCallback;
    private ClassDetailActivity classDetailActivity;


    public static CatalogFragment newInstance(ArrayList<CatalogData> datas) {
        CatalogFragment fragment = new CatalogFragment();
        Bundle bundle = new Bundle();
        bundle.putParcelableArrayList(DATA,datas);
        fragment.setArguments(bundle);
        return fragment;
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try{
            openFileCallback = (OpenFileCallback) activity;
            classDetailActivity = (ClassDetailActivity) getActivity();
        }catch(ClassCastException e){
            throw new ClassCastException(activity.toString()+"must implement OpenFileCallback");
        }
    }


    @Override
    public void onDestroy() {
        int position = catalogAdapter.getLastSelectedPosition();
        if (position != -1){
            CatalogData catalogData = catalogDatas.get(position);
            Preference.getInstance().setLastOpenCatalogData(catalogData.getAid(),OkHttpClientManager.getInstance().getmGson().toJson(catalogData));
        }
        EventBus.getDefault().unregister(this);
        super.onDestroy();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EventBus.getDefault().register(this);
        catalogDatas = getArguments().getParcelableArrayList(DATA);
        catalogAdapter = new CatalogAdapter(getContext(), catalogDatas);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        ViewGroup viewGroup = (ViewGroup) inflater.inflate(R.layout.fragment_catalog, container, false);
        pinnedSectionListView = (PinnedSectionListView) viewGroup.findViewById(R.id.list);
        pinnedSectionListView.setAdapter(catalogAdapter);
        pinnedSectionListView.setOnItemClickListener(this);

        return viewGroup;
    }


    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        CatalogData catalogData = catalogAdapter.getItem(position);
        if (!classDetailActivity.isPlayer()){
            if (catalogData.getTrailers() != 1){
                showShortToast("请先参加该课程,进行付费后观看");
                return;
            }
        }

        int ctype = catalogData.getCtype();
        if (ctype != CatalogData.CTYPE_CATALOG){
            catalogAdapter.setLastSelectedPosition(position);
        }
        switch (ctype){
            case CatalogData.CTYPE_CATALOG:
                break;
            case CatalogData.CTYPE_IMGS: //图片集
                openFileCallback.openImgsCallback(catalogData.getSourcepath());
                break;
            case CatalogData.CTYPE_VIDEO: //视频
                if (catalogData.getSourcepath() != null && !catalogData.getSourcepath().isEmpty()){
                    openFileCallback.openVideoCallback(catalogData.getAdpath(), catalogData.getSourcepath().get(0).filepath, false);
                }
                break;
            case CatalogData.CTYPE_DOC: //文档
                if (catalogData.getSourcepath() != null && !catalogData.getSourcepath().isEmpty()){
                    openFileCallback.openPDFCallback(catalogData.getSourcepath().get(0).filepath, FileUtil.getFileNameWithoutExt(catalogData.getSourcepath().get(0).imgname));
                }
                break;
        }
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(OpenFileEvent openFileEvent) {
        int position = openFileEvent.getPosition();
        catalogAdapter.setLastSelectedPosition(position);
    }


    public interface OpenFileCallback{
        void openVideoCallback(String adPath,String path,boolean isSkipAd);
        void openPDFCallback(String path,String pdfName);
        void openImgsCallback(List<CatalogData.SourcePathData> sourcePathDatas);
    }
}
