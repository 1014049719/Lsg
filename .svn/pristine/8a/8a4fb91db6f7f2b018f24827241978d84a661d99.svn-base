package com.talenton.lsg.ui.feed;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.listener.PauseOnScrollListener;
import com.talenton.lsg.BaseCompatActivity;
import com.talenton.lsg.R;
import com.talenton.lsg.base.dao.model.SearchCacheBean;
import com.talenton.lsg.base.server.XLTError;
import com.talenton.lsg.base.server.XLTResponseCallback;
import com.talenton.lsg.base.server.XLTResponseListener;
import com.talenton.lsg.base.util.NetWorkUtils;
import com.talenton.lsg.base.widget.NoScrollGridView;
import com.talenton.lsg.server.FeedServer;
import com.talenton.lsg.server.SchoolCacheServer;
import com.talenton.lsg.server.bean.feed.CircleListData;
import com.talenton.lsg.server.bean.feed.Feeds;
import com.talenton.lsg.server.bean.feed.PostToParam;
import com.talenton.lsg.server.bean.feed.ReqFeedsList;
import com.talenton.lsg.server.bean.feed.RspFeedsList;
import com.talenton.lsg.server.bean.school.RspListSearchHot;
import com.talenton.lsg.ui.feed.adapter.CircleFeedsAdapter;
import com.talenton.lsg.ui.school.adapter.SearchHistoryAdapter;
import com.talenton.lsg.ui.school.adapter.SearchHotAdapter;
import com.talenton.lsg.widget.SearchView;

import java.util.ArrayList;
import java.util.List;

public class SearchCircleActivity extends BaseCompatActivity implements View.OnClickListener, AdapterView.OnItemClickListener {
    private NoScrollGridView gv_hot;
    private SearchHotAdapter hotAdapter;
    private ListView lv_history;
    private TextView tv_clean;
    private SearchView search_view;
    private List<String> hotList; //热门列表数据
    private ReqFeedsList reqFeedsList;
    private LinearLayout ll_search_content;
    private LinearLayout ll_hot;
    private ArrayList<SearchCacheBean> searchCacheBeans; //历史搜索数据
    private SearchHistoryAdapter searchHistoryAdapter;
    private PullToRefreshListView mPullRefreshListView;
    private ListView mListView;
    private CircleFeedsAdapter mAdapter;
    private PostToParam mPostToParam;
    private int mCurPage, mSumCount;

    public static void startSearchCircleActivity(Context context){
        Intent intent = new Intent(context,SearchCircleActivity.class);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search_circle);

        initView();
        fillData();
    }

    private void fillData() {
        reqFeedsList = new ReqFeedsList();
        showResultView(false);
        fillHostList();
        fillHistroyList();
    }

    /**
     * 填充热门数据
     */
    private void fillHostList() {
        hotList = new ArrayList<>();
        hotAdapter = new SearchHotAdapter(this,hotList);
        gv_hot.setAdapter(hotAdapter);
        gv_hot.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String searchTitle = hotAdapter.getItem(position);
                search_view.setSearchText(searchTitle);
                hideSoftInput(search_view);
                reqFeedsList.title = searchTitle;
                startSearchData();
            }
        });
        FeedServer.getSearchHotList(new XLTResponseListener<RspListSearchHot>() {
            @Override
            public void onResponse(RspListSearchHot responseData, XLTError errorData) {
                if (errorData == null) {
                    hotAdapter.addAll(responseData.getList());
                    hotAdapter.notifyDataSetChanged();
                }
            }
        });
    }

    /**
     * 填充搜索历史数据
     */
    private void fillHistroyList() {
        View footerView = LayoutInflater.from(this).inflate(R.layout.item_school_search_footer,null);
        tv_clean = (TextView) footerView.findViewById(R.id.tv_clean);
        tv_clean.setOnClickListener(this);
        lv_history.addFooterView(footerView);

        List<SearchCacheBean> cacheData = SchoolCacheServer.getInstance().getSearchCache(SearchCacheBean.TYPE_CIRCLE_SEARCH);
        if (cacheData != null && !cacheData.isEmpty()){
            searchCacheBeans = (ArrayList<SearchCacheBean>) cacheData;
        }
        if (searchCacheBeans == null){
            searchCacheBeans = new ArrayList<>();
        }

        lv_history.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                SearchCacheBean searchCacheBean = searchHistoryAdapter.getItem(position);
                search_view.setSearchText(searchCacheBean.getSearchText());
            }
        });
        searchHistoryAdapter = new SearchHistoryAdapter(this,searchCacheBeans);
        lv_history.setAdapter(searchHistoryAdapter);
    }

    /**
     * 是否显示搜索结果view
     * @param isShow
     */
    public void showResultView(boolean isShow){
        if (isShow){
            ll_search_content.setVisibility(View.GONE);
            mPullRefreshListView.setVisibility(View.VISIBLE);
        }else {
            ll_search_content.setVisibility(View.VISIBLE);
            mPullRefreshListView.setVisibility(View.GONE);
        }
    }

    private void initView() {
        ll_search_content = (LinearLayout) findViewById(R.id.ll_search_content);
        ll_hot = (LinearLayout) findViewById(R.id.ll_hot);
        gv_hot = (NoScrollGridView) findViewById(R.id.gv_hot);
        lv_history = (ListView) findViewById(R.id.list);
        search_view = (SearchView) findViewById(R.id.search_view);
        search_view.setIsShowHistroy(true);
        search_view.setSearchType(SearchCacheBean.TYPE_CIRCLE_SEARCH);
        search_view.setSearchHint(R.string.feeds_search_topic_hint);
        search_view.setOnClickHistroyItemListener(new SearchView.OnClickHistroyItemListener() {
            @Override
            public void ClickHistroyItem(String searchText, int position) {
                reqFeedsList.title = searchText;
                startSearchData();
            }
        });
        search_view.setOnSearchCallback(new SearchView.OnSearchCallback() {
            @Override
            public void searchCallback(String searchText) {
                if (!NetWorkUtils.isNetworkAvailable(SearchCircleActivity.this)) {
                    showShortToast(getString(R.string.main_disable_network));
                    return;
                }
                if (!searchText.isEmpty()) {
                    showResultView(true);
                    reqFeedsList.title = searchText;
                    startSearchData();
                } else {
                    showShortToast("搜索内容不能为空");
                }
            }
        });
        mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);

        mPullRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
        mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {

            @Override
            public void onPullDownToRefresh(PullToRefreshBase refreshView) {

            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase refreshView) {
                loadOlderData();
            }

        });
        mListView = mPullRefreshListView.getRefreshableView();
        mListView.setOnScrollListener(new PauseOnScrollListener(ImageLoader.getInstance(), true, true));
        mListView.setOnItemClickListener(this);
        mPostToParam = new PostToParam(CircleListData.CIRCLE_TYPE_TOPIC, 1, "");
        mAdapter = new CircleFeedsAdapter(this, mPostToParam);
        mListView.setAdapter(mAdapter);
    }

    private void startSearchData() {
        showProgress(R.string.main_loading);
        FeedServer.getTopicList(reqFeedsList, new XLTResponseCallback<RspFeedsList>() {
            @Override
            public void onResponse(RspFeedsList data, XLTError error) {
                hideProgress();
                if (error == null && data != null && data.list != null && data.list.size() > 0) {
                    mCurPage = 1;
                    mSumCount = data.count;
                    mAdapter.setFeeds(data);
                } else if (error != null) {
                    showShortToast("网络错误，请重试");
                } else {
                    showShortToast("没有符合条件的结果");
                }
            }
        });
    }

    private void loadOlderData(){

        if(mSumCount <= 0 || (mCurPage * 20) >= mSumCount) {

            showShortToast(getString(R.string.toast_text_no_data));
            mPullRefreshListView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mPullRefreshListView.onRefreshComplete();
                }
            }, 1000);
            //mPullRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
            //mPullRefreshListView.getFooterLoadingView().setVisibility(View.GONE);
            return;
        }
        mCurPage++;
        reqFeedsList.query_pager = String.valueOf(mCurPage);

        FeedServer.getTopicList(reqFeedsList, new XLTResponseCallback<RspFeedsList>() {
            @Override
            public void onResponse(RspFeedsList data, XLTError error) {
                mPullRefreshListView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullRefreshListView.onRefreshComplete();
                    }
                }, 1000);
                if (error == null && data != null && data.list != null) {
                    mAdapter.addOldFeeds(data);
                }
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.tv_clean:
                //清除历史记录
                SchoolCacheServer.getInstance().clearnSearchCacheData();
                searchHistoryAdapter.clear();
                searchHistoryAdapter.notifyDataSetChanged();
                break;
        }
    }

    @Override
    protected int getMenuResourceId() {
        return R.menu.school_class_cancel;
    }

    @Override
    protected void onRightClick(MenuItem item) {
        if (item.getItemId() == R.id.cancel_action){
            finish();
        }
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.school_text_search;
    }

    @Override
    protected int getLeftImageResourceId() {
        return 0;
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        Feeds feeds = (Feeds)parent.getAdapter().getItem(position);
        mPostToParam.tid = feeds.tid;
        mPostToParam.guid = feeds.guid;
        mPostToParam.count = feeds.browsecount;
        if (feeds.ext_circle != null){
            mPostToParam.name = feeds.ext_circle.circle_name;
        }
        CircleFeedsDetailActivity.startCircleFeedsDetailActivity(this, mPostToParam);
    }
}