package com.talenton.lsg.base.okhttp;

import android.support.annotation.NonNull;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.talenton.lsg.base.AppConfig;
import com.talenton.lsg.base.R;
import com.talenton.lsg.base.XltApplication;
import com.talenton.lsg.base.okhttp.callback.FileCallBack;
import com.talenton.lsg.base.okhttp.callback.GsonCallback;
import com.talenton.lsg.base.okhttp.callback.StringCallback;
import com.talenton.lsg.base.server.IntegerSerializer;
import com.talenton.lsg.base.server.LongSerializer;
import com.talenton.lsg.base.server.UserServer;
import com.talenton.lsg.base.server.XLTResponseListener;
import com.talenton.lsg.base.util.AppLogger;
import com.talenton.lsg.base.util.FormatUtil;
import com.talenton.lsg.base.util.Checker;
import com.talenton.lsg.base.util.FileUtil;
import com.talenton.lsg.base.util.XLTToast;

import java.io.File;
import java.util.Map;

/**
 * Created by ttt on 2016/3/25.
 */
public class OkHttpClientManager {
    private static OkHttpClientManager mInstance;
    private OkHttpUtils mOkHttp;
    private Gson mGson;

    private OkHttpClientManager(){
        mOkHttp = OkHttpUtils.getInstance();
        GsonBuilder gb = new GsonBuilder();
        gb.registerTypeAdapter(Long.class, new LongSerializer()).registerTypeAdapter(Integer.class,
                new IntegerSerializer());
        mGson = gb.create();
    }

    public static OkHttpClientManager getInstance(){
        if (mInstance == null){
            synchronized (OkHttpClientManager.class){
                if (mInstance == null){
                    mInstance = new OkHttpClientManager();
                }
            }
        }
        return mInstance;
    }

    public Gson getmGson(){
        return mGson;
    }

    public <T> void addGsonRequest(@NonNull String url, Class<T> responseClass, XLTResponseListener<T> successListener, String params){
        GsonCallback<T> request = new GsonCallback<T>(responseClass, successListener);
        //.mediaType(MediaType.parse("application/x-www-form-urlencoded; charset=utf-8"))
        String urls = String.format("%s%s&access_token=%s", AppConfig.HOME_URL, url, UserServer.getAccessToken());
        AppLogger.d("http request url==>\n"+ urls);
        AppLogger.d("http request params==>\n"+ FormatUtil.formatJson(params));
        mOkHttp .post()
                .url(urls)
                .addParams("para", params)
                .build()
                .execute(request);
    }

    public <T> void addGsonRequest1(@NonNull String url, Class<T> responseClass, XLTResponseListener<T> successListener, String params){
        GsonCallback<T> request = new GsonCallback<T>(responseClass, successListener);
        //.mediaType(MediaType.parse("application/x-www-form-urlencoded; charset=utf-8"))
        String urls = String.format("%s%s&access_token=%s", AppConfig.HOME_URL_SHOP, url, UserServer.getAccessToken());
        AppLogger.d("http request url==>\n"+ urls);
        AppLogger.d("http request params==>\n"+ FormatUtil.formatJson(params));
        mOkHttp .post()
                .url(urls)
                .addParams("para", params)
                .build()
                .execute(request);
    }
    public void GetHttpsRequest(@NonNull String url, StringCallback callback){
        if (callback == null) return;
        mOkHttp.get()
                .url(url)
                .build()
                .execute(callback);
    }

    public <T> void addFileReqeust(@NonNull String url, Class<T> responseClass, XLTResponseListener<T> successListener, Map<String, String> params, String filekey, File file){
        if (Checker.isEmpty(file)){
            XLTToast.makeText(XltApplication.getAppContext(), R.string.file_error).show();
            return;
        }
        GsonCallback<T> request = new GsonCallback<T>(responseClass, successListener);
        String urls = String.format("%s%s&access_token=%s", AppConfig.HOME_URL, url, UserServer.getAccessToken());

        mOkHttp.post()
                .addFile(filekey, FileUtil.getFileExtName(file), file)
                .url(urls)
                .params(params)
                .build()
                .execute(request);
    }

    public void addFileReqeust(@NonNull String url,FileCallBack fileCallBack,Map<String,String> params){
        mOkHttp.post()
                .url(url)
                .params(params)
                .build()
                .execute(fileCallBack);
    }
}
