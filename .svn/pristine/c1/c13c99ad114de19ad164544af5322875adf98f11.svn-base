package com.talenton.lsg.base.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.text.TextUtils;
import android.view.View;
import android.widget.ImageView;

import com.nostra13.universalimageloader.cache.disc.DiskCache;
import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiskCache;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.cache.memory.MemoryCache;
import com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
import com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener;
import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
import com.nostra13.universalimageloader.utils.DiskCacheUtils;
import com.nostra13.universalimageloader.utils.MemoryCacheUtils;
import com.talenton.lsg.base.R;

import java.io.File;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by ttt on 2016/3/29.
 */
public class ImageLoaderManager {

    private static ImageLoaderManager mInstance;
    private ImageLoader mImageLoader;
    private DiskCache mDiskCache;
    private MemoryCache mMemoryCache;

    // 3列本地加载
    public static DisplayImageOptions DEFAULT_LOCAL_IMAGE_DISPLAYER3 = new DisplayImageOptions.Builder()
            .cacheInMemory(true).cacheOnDisk(false).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .showImageOnLoading(R.mipmap.image_failed_3).showImageOnFail(R.mipmap.image_failed_3)
            .showImageForEmptyUri(R.mipmap.image_failed_3).build();
    // 4列本地加载
    public static DisplayImageOptions DEFAULT_LOCAL_IMAGE_DISPLAYER4 = new DisplayImageOptions.Builder()
            .cacheInMemory(true).cacheOnDisk(false).considerExifParams(true)
            .imageScaleType(ImageScaleType.IN_SAMPLE_INT).showImageOnLoading(R.mipmap.image_loading_4)
            .showImageOnFail(R.mipmap.image_failed_4).showImageForEmptyUri(R.mipmap.image_failed_4).build();
    // 大图本地加载
    public static DisplayImageOptions DEFAULT_LOCAL_IMAGE_DISPLAYER = new DisplayImageOptions.Builder()
            .cacheInMemory(true).cacheOnDisk(false).considerExifParams(true)
            .imageScaleType(ImageScaleType.IN_SAMPLE_INT).showImageOnLoading(R.mipmap.image_loading)
            .showImageOnFail(R.mipmap.image_failed).showImageForEmptyUri(R.mipmap.image_failed).build();
    // 大图本地加载dark
    public static DisplayImageOptions DEFAULT_LOCAL_DARK_IMAGE_DISPLAYER = new DisplayImageOptions.Builder()
            .cacheInMemory(true).cacheOnDisk(false).considerExifParams(true)
            .imageScaleType(ImageScaleType.IN_SAMPLE_INT).showImageOnLoading(R.mipmap.image_loading_dark)
            .showImageOnFail(R.mipmap.image_failed_dark).showImageForEmptyUri(R.mipmap.image_failed_dark).build();

    // 4列加载
    public static DisplayImageOptions DEFAULT_IMAGE_DISPLAYER4 = new DisplayImageOptions.Builder().cacheInMemory(true)
            .cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .showImageOnLoading(R.mipmap.image_loading_4).showImageOnFail(R.mipmap.image_failed_4)
            .showImageForEmptyUri(R.mipmap.image_failed_4).build();
    // 3列加载
    public static DisplayImageOptions DEFAULT_IMAGE_DISPLAYER3 = new DisplayImageOptions.Builder().cacheInMemory(true)
            .cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .showImageOnLoading(R.mipmap.image_loading_3).showImageOnFail(R.mipmap.image_failed_3)
            .showImageForEmptyUri(R.mipmap.image_failed_3).build();
    // 大图加载
    public static DisplayImageOptions DEFAULT_IMAGE_DISPLAYER = new DisplayImageOptions.Builder().cacheInMemory(true)
            .cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .showImageOnLoading(R.mipmap.image_loading).showImageOnFail(R.mipmap.image_failed)
            .showImageForEmptyUri(R.mipmap.image_failed).build();
    // 大图加载dark
    public static DisplayImageOptions DEFAULT_DARK_IMAGE_DISPLAYER = new DisplayImageOptions.Builder()
            .cacheInMemory(true).cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .showImageOnLoading(R.mipmap.image_loading_dark).showImageOnFail(R.mipmap.image_failed_dark)
            .showImageForEmptyUri(R.mipmap.image_failed_dark).build();

    public static DisplayImageOptions DEFAULT_DISPLAYER = new DisplayImageOptions.Builder()
            .cacheInMemory(true).cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .build();

    //用户默认头像
    public static DisplayImageOptions DEFAULT_USER_IMAGE_DISPLAYER = new DisplayImageOptions.Builder()
            .cacheInMemory(true).cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .showImageOnLoading(R.mipmap.user_photo).showImageOnFail(R.mipmap.user_photo)
            .showImageForEmptyUri(R.mipmap.user_photo).build();

    // 加载中==>灰色背景
    public static DisplayImageOptions DEFAULT_IMAGE_GRAY_LOADING_DISPLAYER = new DisplayImageOptions.Builder().cacheInMemory(true)
            .cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
            .showImageOnLoading(R.mipmap.load_image_gray_bg).showImageOnFail(R.mipmap.load_image_gray_bg)
            .showImageForEmptyUri(R.mipmap.load_image_gray_bg).build();


    public static DisplayImageOptions createImgOptions(int loadingResId,int faildResId){
        DisplayImageOptions displayImageOptions = new DisplayImageOptions.Builder().cacheInMemory(true)
                .cacheOnDisk(true).considerExifParams(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)
                .showImageOnLoading(loadingResId).showImageOnFail(faildResId)
                .showImageForEmptyUri(faildResId).build();
        return displayImageOptions;
    }

    public static ImageLoaderManager getInstance() {
        if (mInstance == null) {
            synchronized (ImageLoaderManager.class) {
                if (mInstance == null) {
                    mInstance = new ImageLoaderManager();
                }
            }
        }
        return mInstance;
    }

    public ImageLoaderManager() {
        mImageLoader = ImageLoader.getInstance();
    }

    public  void initImageLoader(Context context) {
        // This configuration tuning is custom. You can tune every option, you may tune some of them,
        // or you can create default configuration by
        //  ImageLoaderConfiguration.createDefault(this);
        // method.
        ImageLoaderConfiguration.Builder config = new ImageLoaderConfiguration.Builder(context);
        config.threadPriority(Thread.NORM_PRIORITY - 2);
        config.denyCacheImageMultipleSizesInMemory();
        config.diskCacheFileNameGenerator(new Md5FileNameGenerator());
        config.diskCacheSize(50 * 1024 * 1024); // 50 MiB
        config.tasksProcessingOrder(QueueProcessingType.LIFO);
        config.writeDebugLogs(); // Remove for release app
        mDiskCache = new UnlimitedDiskCache(FileUtil.getImgExternalPath(context), null, new Md5FileNameGenerator());
        config.diskCache(mDiskCache);
        mMemoryCache = new LruMemoryCache(1024 * 1024 * 5);
        config.memoryCache(mMemoryCache);
        // Initialize ImageLoader with configuration.
        ImageLoader.getInstance().init(config.build());
    }

    private DisplayImageOptions getDisplayImageOptions(int imageDefault) {

        DisplayImageOptions options = new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisk(true)
                .showImageOnFail(imageDefault).showImageOnLoading(imageDefault).showImageForEmptyUri(imageDefault)
                .bitmapConfig(Bitmap.Config.RGB_565).considerExifParams(true).build();
        return options;
    }

    private DisplayImageOptions getDisplayImageOptions(int imageOnFail, int imageOnLoading, int imageForEmptyUri) {

        DisplayImageOptions options = new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisk(true)
                .showImageOnFail(imageOnFail).showImageOnLoading(imageOnLoading).showImageForEmptyUri(imageForEmptyUri)
                .bitmapConfig(Bitmap.Config.RGB_565).considerExifParams(true).build();
        return options;
    }

    public void displayImage(String uri, ImageView imageView) {
        displayImage(uri, imageView, null, null, null);
    }

    public void displayImage(String uri, ImageView imageView, ImageLoadingListener listener) {
        displayImage(uri, imageView, null, listener, null);
    }

    public void displayImage(String uri, ImageView imageView, int imageDefault) {
        displayImage(uri, imageView, imageDefault, imageDefault, imageDefault);
    }

    public void displayImage(String uri, ImageView imageView, int imageOnFail, int imageOnLoading,
                             int imageForEmptyUri) {
        displayImage(uri, imageView, null, imageOnFail, imageOnLoading, imageForEmptyUri);
    }

    public void displayImage(String uri, ImageView imageView, ImageLoadingListener listener, int imageOnFail,
                             int imageOnLoading, int imageForEmptyUri) {
        DisplayImageOptions options = getDisplayImageOptions(imageOnFail, imageOnLoading, imageForEmptyUri);
        displayImage(uri, imageView, options, listener, null);
    }

    public void displayImage(String uri, ImageView imageView, DisplayImageOptions options,
                             ImageLoadingListener listener, ImageLoadingProgressListener progressListener) {
        if (listener == null) {
            listener = new AnimateFirstDisplayListener();
        }
        mImageLoader.displayImage(uri, imageView, options, listener, progressListener);
    }

    public void loadImage(String url, ImageLoadingListener listener) {
        mImageLoader.loadImage(url, listener);
    }

    /**
     * 加载图片默认的ImageLoadingListener
     *
     * @author yellow
     *
     */
    private static class AnimateFirstDisplayListener extends SimpleImageLoadingListener {

        static final List<String> displayedImages = Collections.synchronizedList(new LinkedList<String>());

        @Override
        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
            if (loadedImage != null) {
                ImageView imageView = (ImageView) view;
                boolean firstDisplay = !displayedImages.contains(imageUri.trim());
                if (firstDisplay) {
                    FadeInBitmapDisplayer.animate(imageView, 500);
                    displayedImages.add(imageUri.trim());
                }
            }
        }
    }

    /**
     * 暂停加载
     */
    public void pause() {
        mImageLoader.pause();
    }

    /**
     * 唤醒加载器
     */
    public void resume() {
        mImageLoader.resume();
    }


    /**
     * 清除文件和内存缓存
     *
     */
    @SuppressWarnings("deprecation")
    public void removeDiskAndMemoryCache() {
        mDiskCache.clear();
        mMemoryCache.clear();
    }

    public void removeDiskAndMemoryCache(String imageUri) {
        DiskCacheUtils.removeFromCache(imageUri, mDiskCache);
        MemoryCacheUtils.removeFromCache(imageUri, mMemoryCache);
    }

    @SuppressWarnings("deprecation")
    public long getDiskCacheSize() {
        // Log.d("ImageLoaderManager",
        // mDiskCache.getDirectory().getAbsolutePath());
        try {
            return FileUtil.getFileSize(mDiskCache.getDirectory());
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    public File getCache(String uri) {
        if (TextUtils.isEmpty(uri)) {
            return null;
        }
        return mDiskCache.get(uri);
    }
}
